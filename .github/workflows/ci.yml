name: Cetamura Batch Tool CI

on:
  push:
    branches: [ main, master, ci-cd-development ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.9, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt
        
    - name: Run all tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Verify test count (should be 52 tests)
      run: |
        python -m pytest tests/ --collect-only -q | findstr "test session starts"
        
    - name: Run critical multi-file processing test
      run: |
        python -m pytest tests/test_main.py::test_no_files_skipped_in_multi_file_set -v
        
    - name: Run PhotoSet structure tests
      run: |
        python -m pytest tests/test_main.py::test_photoset_namedtuple_structure -v
        python -m pytest tests/test_main.py::test_find_photo_sets_enhanced_with_multiple_files -v
        
    - name: Test custom test runner (all tests)
      run: |
        python tests/run_tests.py
        
    - name: Test custom test runner (imports only)
      run: |
        python tests/run_tests.py --imports
        
    - name: Test custom test runner (quick check only)
      run: |
        python tests/run_tests.py --quick
        
    - name: Test custom test runner (no pytest flag)
      run: |
        python tests/run_tests.py --no-pytest
        
  verify-script:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        
    - name: Verify main script imports correctly
      run: |
        python -c "import src.main; print('Main script imports successfully')"
        
    - name: Check enhanced script functions
      run: |
        python -c "
        from src.main import sanitize_name, convert_jpg_to_tiff, extract_iid_from_xml
        from src.main import find_photo_sets_enhanced, batch_process_with_safety_nets, extract_iid_from_xml_enhanced
        from src.main import PhotoSet, FilePair, BatchContext, validate_photo_set, apply_exif_orientation
        print('Successfully validated all core and enhanced module functions')
        print('Data structures: PhotoSet, FilePair, BatchContext')
        "
        
    - name: Verify PhotoSet NamedTuple structure
      run: |
        python -c "
        from src.main import PhotoSet, FilePair
        from pathlib import Path
        # Test PhotoSet creation
        ps = PhotoSet(
            base_directory=Path('.'),
            jpg_files=[Path('test.jpg')],
            xml_files=[Path('test.xml')],
            manifest_file=Path('manifest.ini'),
            structure_type='standard'
        )
        assert isinstance(ps.jpg_files, list), 'jpg_files must be a list'
        assert isinstance(ps.xml_files, list), 'xml_files must be a list'
        print('PhotoSet structure validated: jpg_files and xml_files are lists')
        
        # Test FilePair creation
        fp = FilePair(xml=Path('test.xml'), jpg=Path('test.jpg'), iid='test:001')
        assert fp.iid == 'test:001', 'FilePair IID mismatch'
        print('FilePair structure validated: xml, jpg, iid fields present')
        "
        
    - name: List available functions in the module (diagnostic)
      run: |
        python -c "
        import src.main
        functions = [name for name in dir(src.main) if callable(getattr(src.main, name)) and not name.startswith('_')]
        print('Available functions in src.main:')
        for func in sorted(functions):
            print(f'- {func}')
        "
        
    - name: Test enhanced test runner functionality
      run: |
        python tests/run_tests.py --imports --no-pytest

  regression-tests:
    name: Critical Regression Tests
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt
        
    - name: Run multi-file processing regression test
      run: |
        python -m pytest tests/test_main.py::test_no_files_skipped_in_multi_file_set -v --tb=short
        
    - name: Verify test passed and processed 3 files
      run: |
        python -c "print('REGRESSION TEST: Verifying multi-file processing fix'); print('This test prevents the only-first-file-processed bug'); print('If this test fails, the system is only processing 1 file instead of ALL files')"
        
    - name: Run PhotoSet structure validation
      run: |
        python -m pytest tests/test_main.py::test_photoset_namedtuple_structure -v
        python -m pytest tests/test_main.py::test_filepair_namedtuple_structure -v
        
    - name: Run batch processing integration tests
      run: |
        python -m pytest tests/test_main.py::test_batch_process_multi_file_dry_run -v
        python -m pytest tests/test_main.py::test_batch_process_multi_file_staging -v
        
    - name: Summary
      run: |
        python -c "print('='*60); print('REGRESSION TESTS PASSED'); print('='*60); print('[PASS] Multi-file processing works correctly'); print('[PASS] PhotoSet and FilePair structures validated'); print('[PASS] Batch processing handles multiple files'); print('[PASS] No files are skipped in photo sets'); print('='*60)"

  validation-tests:
    name: Post-Processing Validation Tests
    needs: test
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install -r requirements/requirements-dev.txt
        
    - name: Run validation module tests
      run: |
        python -m pytest tests/test_validation.py -v --tb=short
        
    - name: Verify ZIP content verification
      run: |
        python -m pytest tests/test_validation.py::TestVerifyZipContents -v
        
    - name: Verify batch output validation
      run: |
        python -m pytest tests/test_validation.py::TestValidateBatchOutput -v
        
    - name: Verify reconciliation reporting
      run: |
        python -m pytest tests/test_validation.py::TestReconciliationReport -v
        
    - name: Verify pre-flight checks
      run: |
        python -m pytest tests/test_validation.py::TestPreFlightChecks -v
        
    - name: Test validation module imports
      run: |
        python -c "from src.validation import verify_zip_contents, validate_batch_output, generate_reconciliation_report, pre_flight_checks; from src.validation import ValidationResult, ReconciliationReport, PreFlightResult; print('[PASS] All validation functions and data structures import correctly')"
        
    - name: Test pre-flight checks logic
      run: |
        python -c "from src.validation import pre_flight_checks; from pathlib import Path; result = pre_flight_checks([], Path('.')); print('[PASS] Pre-flight checks execute correctly' if result else '[FAIL]')"
        
    - name: Test reconciliation logic with missing CSV
      run: |
        python -c "from src.validation import generate_reconciliation_report; from pathlib import Path; report = generate_reconciliation_report([], Path('nonexistent.csv'), Path('.')); print('[PASS] Reconciliation handles missing CSV' if report.csv_success_rows == 0 else '[FAIL]')"
        
    - name: Summary
      run: |
        python -c "print('='*60); print('VALIDATION TESTS PASSED'); print('='*60); print('[PASS] ZIP content verification works'); print('[PASS] Batch output validation works'); print('[PASS] Reconciliation reporting works'); print('[PASS] Pre-flight checks work'); print('[PASS] All 27 validation tests passing'); print('='*60)"
